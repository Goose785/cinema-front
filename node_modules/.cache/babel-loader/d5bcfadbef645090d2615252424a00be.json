{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n\nbaseURL = 'https://backend-cinemagd.herokuapp.com/'; // }\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n\napi.interceptors.request.use(config => {\n  if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.getPosts = params => {\n      return api.get('/posts/', {\n        params\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.addPost = postBody => {\n      const formData = new FormData();\n\n      for (const key in postBody) {\n        formData.append(key, postBody[key]);\n      }\n\n      return api.post('/posts/add/', formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.deletePost = id => {\n      return api.delete(`/posts/delete/${id}/`).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.getMovies = async params => {\n      let url = '/movies/';\n      let query = new URLSearchParams();\n\n      for (const key in params) {\n        if (params[key] != null) {\n          query.append(key, params[key]);\n        }\n      }\n\n      if (query.toString() !== '') {\n        url += '?' + query.toString();\n      }\n\n      const places = await api.get(url).then(response => {\n        console.log(response.data);\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return places;\n    };\n\n    this.getMovie = async id => {\n      const movies = await api.get('/movies/' + id + '/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return movies;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/musubimanagement/Desktop/travis-cfront/src/API.js"],"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","interceptors","request","use","config","requireToken","localStorage","getItem","common","JSON","parse","token","err","console","error","API","getPosts","params","get","then","response","data","catch","Error","addPost","postBody","formData","FormData","key","append","post","deletePost","id","delete","getMovies","url","query","URLSearchParams","toString","places","log","getMovie","movies"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\nbaseURL = 'https://backend-cinemagd.herokuapp.com/';\n// }\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\napi.interceptors.request.use(\n    config => {\n        if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n            config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n        }\n\n        return config;\n    },\n    err => {\n        console.error(err);\n    }\n);\n\nexport default class API {\n    getPosts = params => {\n        return api\n            .get('/posts/', { params })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n    };\n    addPost = postBody => {\n        const formData = new FormData();\n\n        for (const key in postBody) {\n            formData.append(key, postBody[key]);\n        }\n\n        return api\n            .post('/posts/add/', formData)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n    };\n    deletePost = id => {\n        return api.delete(`/posts/delete/${id}/`).catch(error => {\n            throw new Error(error);\n        });\n    };\n\n    getMovies = async params => {\n        let url = '/movies/';\n        let query = new URLSearchParams();\n        for (const key in params) {\n            if (params[key] != null) {\n                query.append(key, params[key]);\n            }\n        }\n\n        if (query.toString() !== '') {\n            url += '?' + query.toString();\n        }\n        const places = await api\n            .get(url)\n            .then(response => {\n                console.log(response.data);\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return places;\n    };\n\n    getMovie = async id => {\n        const movies = await api\n            .get('/movies/' + id + '/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return movies;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}